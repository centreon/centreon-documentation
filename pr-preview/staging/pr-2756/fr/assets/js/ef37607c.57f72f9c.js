"use strict";(self.webpackChunkcentreon_docs=self.webpackChunkcentreon_docs||[]).push([[26123],{64677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>k,frontMatter:()=>p,metadata:()=>c,toc:()=>m});n(67294);var a=n(3905),o=n(51715),i=n(7626);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const p={id:"develop-with-centreon-plugins",title:"Develop with centreon-plugins"},u=void 0,c={unversionedId:"integrations/plugin-packs/dev-resources/develop-with-centreon-plugins",id:"integrations/plugin-packs/dev-resources/develop-with-centreon-plugins",title:"Develop with centreon-plugins",description:"Set up your environment",source:"@site/pp/integrations/plugin-packs/dev-resources/develop-with-centreon-plugins.md",sourceDirName:"integrations/plugin-packs/dev-resources",slug:"/integrations/plugin-packs/dev-resources/develop-with-centreon-plugins",permalink:"/centreon-documentation/pr-preview/staging/pr-2756/fr/pp/integrations/plugin-packs/dev-resources/develop-with-centreon-plugins",draft:!1,editUrl:"https://github.com/centreon/centreon-documentation/edit/staging/pp/integrations/plugin-packs/dev-resources/develop-with-centreon-plugins.md",tags:[],version:"current",frontMatter:{id:"develop-with-centreon-plugins",title:"Develop with centreon-plugins"},sidebar:"pp",previous:{title:"Plugins development guidelines",permalink:"/centreon-documentation/pr-preview/staging/pr-2756/fr/pp/integrations/plugin-packs/dev-resources/plugins-guidelines"},next:{title:"3CX",permalink:"/centreon-documentation/pr-preview/staging/pr-2756/fr/pp/integrations/plugin-packs/procedures/applications-voip-3cx-restapi"}},d={},m=[{value:"Set up your environment",id:"set-up-your-environment",level:2},{value:"Enable our standard repositories",id:"enable-our-standard-repositories",level:3},{value:"Fork and clone the centreon-plugins repository",id:"fork-and-clone-the-centreon-plugins-repository",level:3},{value:"Understand project organization",id:"understand-project-organization",level:2},{value:"Layout and concepts",id:"layout-and-concepts",level:3},{value:"Shared directories",id:"shared-directories",level:3},{value:"The <strong>centreon</strong> directory",id:"the-centreon-directory",level:4},{value:"The <strong>snmp_standard/mode</strong> directory",id:"the-snmp_standardmode-directory",level:4},{value:"Tutorial - How to create a plugin for <em>my-awesome-app</em>",id:"tutorial---how-to-create-a-plugin-for-my-awesome-app",level:2},{value:"Context: simple JSON health API",id:"context-simple-json-health-api",level:3},{value:"Understand the data",id:"understand-the-data",level:3},{value:"Create directories for a new plugin",id:"create-directories-for-a-new-plugin",level:3},{value:"Create the plugin.pm file",id:"create-the-pluginpm-file",level:3},{value:"Create the appmetrics.pm file",id:"create-the-appmetricspm-file",level:3},{value:"Common declarations and subs",id:"common-declarations-and-subs",level:4},{value:"Declare your counters",id:"declare-your-counters",level:4},{value:"Create prefix callback functions",id:"create-prefix-callback-functions",level:4},{value:"Get raw data from API and understand the data structure",id:"get-raw-data-from-api-and-understand-the-data-structure",level:4},{value:"Push data to global counters (type =&gt; 0)",id:"push-data-to-global-counters-type--0",level:4},{value:"Push data to counters having an instance (type =&gt; 1)",id:"push-data-to-counters-having-an-instance-type--1",level:4},{value:"Help section and assistant to build your centreon objects",id:"help-section-and-assistant-to-build-your-centreon-objects",level:4}],h={toc:m},g="wrapper";function k(e){var{components:t}=e,p=s(e,["components"]);return(0,a.kt)(g,l(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},h,p),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"set-up-your-environment"},"Set up your environment"),(0,a.kt)("p",null,"To use the centreon-plugins framework, you'll need the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A Linux operating system, ideally Debian 11 or RHEL/RHEL-like >= 8"),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"},"git")," command line utility"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/"},"GitHub")," account.")),(0,a.kt)("h3",{id:"enable-our-standard-repositories"},"Enable our standard repositories"),(0,a.kt)(o.Z,{groupId:"sync",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Debian 11",label:"Debian 11",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'echo "deb https://packages.centreon.com/apt-22.04-stable $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/centreon.list\nwget -O- https://apt-key.centreon.com | gpg --dearmor | tee /etc/apt/trusted.gpg.d/centreon.gpg > /dev/null 2>&1\n'))),(0,a.kt)(i.Z,{value:"RHEL 8 and alike",label:"RHEL 8 and alike",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"dnf install -y https://packages.centreon.com/artifactory/rpm-standard/22.04/el8/stable/noarch/centreon-release-22.04-1.el8.noarch.rpm\n")))),(0,a.kt)("p",null,"Install the following dependencies:"),(0,a.kt)(o.Z,{groupId:"sync",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Debian 11",label:"Debian 11",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"apt-get install 'libpod-parser-perl' 'libnet-curl-perl' 'liburi-encode-perl' 'libwww-perl' \\\n    'liblwp-protocol-https-perl' 'libhttp-cookies-perl' 'libio-socket-ssl-perl' 'liburi-perl' \\\n    'libhttp-proxypac-perl' 'libcryptx-perl' 'libjson-xs-perl' 'libjson-path-perl' \\\n    'libcrypt-argon2-perl' 'libkeepass-reader-perl'\n"))),(0,a.kt)(i.Z,{value:"RHEL 8 and alike",label:"RHEL 8 and alike",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"dnf install 'perl(Digest::MD5)' 'perl(Pod::Find)' 'perl-Net-Curl' 'perl(URI::Encode)' \\\n    'perl(LWP::UserAgent)' 'perl(LWP::Protocol::https)' 'perl(IO::Socket::SSL)' 'perl(URI)' \\\n    'perl(HTTP::ProxyPAC)' 'perl-CryptX' 'perl(MIME::Base64)' 'perl(JSON::XS)' 'perl-JSON-Path' \\\n    'perl-KeePass-Reader' 'perl(Storable)' 'perl(POSIX)' 'perl(Encode)'\n")))),(0,a.kt)("h3",{id:"fork-and-clone-the-centreon-plugins-repository"},"Fork and clone the centreon-plugins repository"),(0,a.kt)("p",null,"Within GitHub UI, on the top left, click on the ",(0,a.kt)("strong",{parentName:"p"},"Fork")," button:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:n(42733).Z,width:"759",height:"228"})),(0,a.kt)("p",null,"Use the git utility to fetch your repository fork:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://<githubusername>@github.com/<githubusername>/centreon-plugins\n")),(0,a.kt)("p",null,"Create a branch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd centreon-plugins\ngit checkout -b 'my-first-plugin'\n")),(0,a.kt)("h2",{id:"understand-project-organization"},"Understand project organization"),(0,a.kt)("h3",{id:"layout-and-concepts"},"Layout and concepts"),(0,a.kt)("p",null,"The project content is made of a main binary (",(0,a.kt)("inlineCode",{parentName:"p"},"centreon_plugins.pl"),"), and a logical\ndirectory structure allowing to separate plugins and modes files across the domain they\nare referring to."),(0,a.kt)("p",null,"You can display it using the command ",(0,a.kt)("inlineCode",{parentName:"p"},"tree -L 1"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},".\n\u251c\u2500\u2500 apps\n\u251c\u2500\u2500 blockchain\n\u251c\u2500\u2500 centreon\n\u251c\u2500\u2500 centreon_plugins.pl\n\u251c\u2500\u2500 changelog\n\u251c\u2500\u2500 cloud\n\u251c\u2500\u2500 contrib\n\u251c\u2500\u2500 database\n\u251c\u2500\u2500 doc\n\u251c\u2500\u2500 example\n\u251c\u2500\u2500 hardware\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 network\n\u251c\u2500\u2500 notification\n\u251c\u2500\u2500 os\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 snmp_standard\n\u251c\u2500\u2500 sonar-project.properties\n\u2514\u2500\u2500 storage\n")),(0,a.kt)("p",null,"Let's take a deeper look at the layout of the directory containing modes to monitor Linux\nsystems through the command-line (",(0,a.kt)("inlineCode",{parentName:"p"},"tree os/linux/local/ -L 1"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"os/linux/local/\n\u251c\u2500\u2500 custom      # Type: Directory. Contains code that can be used by several modes (e.g authentication, token management, ...).\n\u2502\xa0\xa0 \u2514\u2500\u2500 cli.pm  # Type: File. *Custom mode* defining common methods\n\u251c\u2500\u2500 mode        # Type: Directory. Contains all **modes**.\n[...]\n\u2502\xa0\xa0 \u2514\u2500\u2500 cpu.pm  # Type: File. **Mode** containing the code to monitor the CPU\n[...]\n\u2514\u2500\u2500 plugin.pm   # Type: File. **Plugin** definition.\n")),(0,a.kt)("p",null,"Note the os/linux/",(0,a.kt)("strong",{parentName:"p"},"local"),". The project offers other ways to monitor Linux, SNMP for example. To avoid\nmixing modes using different protocols in the same directory and face some naming collisions, we split\nthem across several directories making it clear what protocol they rely on."),(0,a.kt)("p",null,"Now, let's see how these concepts combine to build a command line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# <perl interpreter> <main_binary> --plugin=<perl_normalized_path_to_plugin_file> --mode=<mode_name>\nperl centreon_plugins.pl --plugin=os::linux::local::plugin --mode=cpu\n")),(0,a.kt)("h3",{id:"shared-directories"},"Shared directories"),(0,a.kt)("p",null,"Some specific directories are not related to a domain (os, cloud...) and are used\nacross all plugins."),(0,a.kt)("h4",{id:"the-centreon-directory"},"The ",(0,a.kt)("strong",{parentName:"h4"},"centreon")," directory"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"centreon")," directory is specific, it contains:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Project libraries/packages. This is all the code that will help you to develop faster\nby avoiding coding protocol-related things (SNMP, HTTPx, SSH...) or common things like\noptions or cache management from scratch. You can read the perl modules if you're an experienced developer\nbut there is very little chance that you would have to modify anything in it."),(0,a.kt)("li",{parentName:"ul"},"Common files shared by multiple plugins. This is to avoid duplicating code across the\ndirectory tree and ease the maintenance of the project.")),(0,a.kt)("h4",{id:"the-snmp_standardmode-directory"},"The ",(0,a.kt)("strong",{parentName:"h4"},"snmp_standard/mode")," directory"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"snmp_standard/mode")," exists since the beginning when SNMP monitoring was much more used\nthan it is today. All the modes it contains use standard OIDs, which means that many plugins are\nrelying on these when the manufacturer supports standard MIBs on their devices."),(0,a.kt)("h2",{id:"tutorial---how-to-create-a-plugin-for-my-awesome-app"},"Tutorial - How to create a plugin for ",(0,a.kt)("em",{parentName:"h2"},"my-awesome-app")),(0,a.kt)("h3",{id:"context-simple-json-health-api"},"Context: simple JSON health API"),(0,a.kt)("p",null,"In this tutorial, we will create a very simple probe checking an application's health\ndisplayed in JSON through a simple API."),(0,a.kt)("p",null,"You can mockup an API with the free ",(0,a.kt)("a",{parentName:"p",href:"https://designer.mocky.io/"},"mocky")," tool.\nWe created one for this tutorial, test it with ",(0,a.kt)("inlineCode",{parentName:"p"},"curl https://run.mocky.io/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656")),(0,a.kt)("p",null,"It returns the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="my-awesome-app health JSON"',title:'"my-awesome-app',health:!0,'JSON"':!0},'{\n    "health": "yellow",\n    "db_queries":{\n         "select": 1230,\n         "update": 640,\n         "delete": 44\n    },\n    "connections":[\n      {\n        "component": "my-awesome-frontend",\n        "value": 122\n      },\n      {\n        "component": "my-awesome-db",\n        "value": 92\n      }\n    ],\n    "errors":[\n      {\n        "component": "my-awesome-frontend",\n        "value": 32\n      },\n      {\n        "component": "my-awesome-db",\n        "value": 27\n      }\n    ]\n}\n')),(0,a.kt)("p",null,"All files showed in this tutorial can be found on the centreon-plugins GitHub in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/centreon/centreon-plugins/tree/master/contrib/tutorial/"},"tutorial"),"\n",(0,a.kt)("strong",{parentName:"p"},"contrib")," section."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You have to move the contents of ",(0,a.kt)("inlineCode",{parentName:"p"},"contrib/tutorial/apps/")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"apps/")," if you want to run it for testing purposes."),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"cp -R contrib/tutorial/apps/* apps/"))),(0,a.kt)("h3",{id:"understand-the-data"},"Understand the data"),(0,a.kt)("p",null,"Understanding the data is very important as it will drive the way you will design\nthe ",(0,a.kt)("strong",{parentName:"p"},"mode")," internals. This is the ",(0,a.kt)("strong",{parentName:"p"},"first thing to do"),", no matter what protocol you\nare using."),(0,a.kt)("p",null,"There are several important properties for a piece of data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type of the data to process: string, int... There is no limitation in the kind of data you can process"),(0,a.kt)("li",{parentName:"ul"},"Dimensions of the data, is it ",(0,a.kt)("strong",{parentName:"li"},"global")," or linked to an ",(0,a.kt)("strong",{parentName:"li"},"instance"),"?"),(0,a.kt)("li",{parentName:"ul"},"Data layout, in other words anticipate the kind of ",(0,a.kt)("strong",{parentName:"li"},"data structure")," to manipulate.")),(0,a.kt)("p",null,"In our example, the most common things are present. We can summarize it like that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"health")," node is ",(0,a.kt)("strong",{parentName:"li"},"global")," data and is a string. Structure is a simple ",(0,a.kt)("em",{parentName:"li"},"key/value")," pair"),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"db_queries")," node is a collection of ",(0,a.kt)("strong",{parentName:"li"},"global")," integer values about the database. Structure is a hash containing multiple key/value pairs"),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"connections")," node contains integer values (",(0,a.kt)("inlineCode",{parentName:"li"},"122"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"92"),") referring to specific ",(0,a.kt)("strong",{parentName:"li"},"instances")," (",(0,a.kt)("inlineCode",{parentName:"li"},"my-awesome-frontend"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"my-awesome-db"),"). The structure is an array of hashes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"errors")," is the same as ",(0,a.kt)("inlineCode",{parentName:"li"},"connections")," except the data itself tracks errors instead of connections.")),(0,a.kt)("p",null,"Understanding this will be important to code it correctly."),(0,a.kt)("h3",{id:"create-directories-for-a-new-plugin"},"Create directories for a new plugin"),(0,a.kt)("p",null,"Create directories and files required for your ",(0,a.kt)("strong",{parentName:"p"},"plugin")," and ",(0,a.kt)("strong",{parentName:"p"},"modes"),"."),(0,a.kt)("p",null,"Go to your centreon-plugins local git and create the appropriate directories and files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# path to the main directory and the subdirectory containing modes\nmkdir -p apps/myawesomeapp/api/mode/\n# path to the main plugin file\ntouch apps/myawesomeapp/api/plugin.pm\n# path to the specific mode(s) file(s)\ntouch apps/myawesomeapp/api/mode/appsmetrics.pm\n")),(0,a.kt)("h3",{id:"create-the-pluginpm-file"},"Create the plugin.pm file"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.pm")," is the first thing to create, it contains:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A set of instructions to load required libraries and compilation options"),(0,a.kt)("li",{parentName:"ul"},"A list of all ",(0,a.kt)("strong",{parentName:"li"},"mode(s)")," and path(s) to their associated files/perl packages"),(0,a.kt)("li",{parentName:"ul"},"A description that will display when you list all plugins or display this plugin's help.")),(0,a.kt)("p",null,"Here is the commented version of the plugin.pm file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl",metastring:'title="my-awesome-app plugin.pm file"',title:'"my-awesome-app',"plugin.pm":!0,'file"':!0},"[.. license and copyright things ..]\n\n# Name of your perl package\npackage apps::myawesomeapp::api::plugin;\n\n# Always use strict and warnings, will guarantee that your code is clean and help debugging it\nuse strict;\nuse warnings;\n# Load the base for your plugin, here we don't do SNMP, SQL or have a custom directory, so we use the _simple base\nuse base qw(centreon::plugins::script_simple);\n\n# Global sub to create and return the perl object. Don't bother understand what each instruction is doing.\nsub new {\n    my ($class, %options) = @_;\n    my $self = $class->SUPER::new(package => __PACKAGE__, %options);\n    bless $self, $class;\n\n    # A version, we don't really use it but could help if your want to version your code\n    $self->{version} = '0.1';\n    # Important part!\n    #    On the left, the name of the mode as users will use it in their command line\n    #    On the right, the path to the file (note that .pm is not present at the end)\n    $self->{modes} = {\n        'app-metrics' => 'apps::myawesomeapp::api::mode::appmetrics'\n    };\n\n    return $self;\n}\n\n# Declare this file as a perl module/package\n1;\n\n# Beginning of the documenation/help. `__END__` Specify to the interpreter that instructions below don't need to be compiled\n# =head1 [..] Specify the section level and the label when using the plugin with --help\n# Check my-awesome [..] Quick overview of wath the plugin is doing\n# =cut Close the head1 section\n\n__END__\n\n=head1 PLUGIN DESCRIPTION\n\nCheck my-awesome-app health and metrics through its custom API\n\n=cut\n")),(0,a.kt)("p",null,"Your first dummy plugin is working, congrats!"),(0,a.kt)("p",null,"Run this command:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --list-mode")),(0,a.kt)("p",null,"It already outputs a lot of things. Ellipsized lines are basically all standard capabilities\ninherited from the ",(0,a.kt)("strong",{parentName:"p"},"script_custom")," base."),(0,a.kt)("p",null,"You probably already recognized things you've previsously defined in your ",(0,a.kt)("strong",{parentName:"p"},"plugin.pm")," module."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"\nPlugin Description:\n    Check my-awesome-app health and metrics through its custom API\n\nGlobal Options:\n    --mode  Choose a mode.\n[..]\n    --version\n            Display plugin version.\n[..]\n\nModes Available:\n   app-metrics\n")),(0,a.kt)("h3",{id:"create-the-appmetricspm-file"},"Create the appmetrics.pm file"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"appmetrics.pm")," file will contain your code, in other words, all the instructions to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Declare options for the mode"),(0,a.kt)("li",{parentName:"ul"},"Connect to ",(0,a.kt)("strong",{parentName:"li"},"run.mocky.io")," over HTTPS"),(0,a.kt)("li",{parentName:"ul"},"Get the JSON from the ",(0,a.kt)("strong",{parentName:"li"},"/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656")," endpoint"),(0,a.kt)("li",{parentName:"ul"},"Extract information and format it to be compliant with Centreon.")),(0,a.kt)("p",null,"Let's build it iteratively."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Important note: function (sub) names must not be modified. For example, you cannot\nchoose to rename ",(0,a.kt)("inlineCode",{parentName:"p"},"check_options")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"option_check"),".")),(0,a.kt)("h4",{id:"common-declarations-and-subs"},"Common declarations and subs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"# Path to your package. '::' instead of '/', and no .pm at the end.\npackage apps::myawesomeapp::api::mode::appmetrics;\n\n# Don't forget these ;)\nuse strict;\nuse warnings;\n# We want to connect to an HTTP server, let's use the common module\nuse centreon::plugins::http;\n# Use the counter module. It will save you a lot of work and will manage a lot of things for you.\n# Consider this as mandatory when writing a new mode.\nuse base qw(centreon::plugins::templates::counter);\n# Import some functions that will make your life easier\nuse centreon::plugins::templates::catalog_functions qw(catalog_status_threshold_ng);\n# We will have to process some JSON, no need to reinvent the wheel, load the lib you installed in a previous section\nuse JSON::XS;\n")),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," function (sub) to initialize the mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"sub new {\n    my ($class, %options) = @_;\n    # All options/properties of this mode, always add the force_new_perfdata => 1 to enable new metric/performance data naming.\n    # It also where you can specify that the plugin uses a cache file for example\n    my $self = $class->SUPER::new(package => __PACKAGE__, %options, force_new_perfdata => 1);\n    bless $self, $class;\n\n    # This is where you can specify options/arguments your plugin supports.\n    # All options here stick to what the centreon::plugins::http module needs to establish a connection\n    # You don't have to specify all options from the http module, only the one that the user may want to tweak for its needs\n    $options{options}->add_options(arguments => {\n        # One the left it's the option name that will be used in the command line. The ':s' at the end is to\n        # define that this options takes a value.\n        # On the right, it's the code name for this option, optionnaly you can define a default value so the user\n        # doesn't have to set it\n         'hostname:s'           => { name => 'hostname' },\n         'proto:s'              => { name => 'proto', default => 'https' },\n         'port:s'               => { name => 'port', default => 443 },\n         'timeout:s'            => { name => 'timeout' },\n        # These options are here to defined conditions about which status the plugin will return regarding HTTP response code\n         'unknown-status:s'     => { name => 'unknown_status', default => '%{http_code} < 200 or %{http_code} >= 300' },\n         'warning-status:s'     => { name => 'warning_status' },\n         'critical-status:s'    => { name => 'critical_status', default => '' }\n    });\n\n    # This is to create a local copy of a centreon::plugins::http that we will manipulate\n    # %options basically overwrite default http value with key/value pairs from options above to instantiate the http module\n    # Ref https://github.com/centreon/centreon-plugins/blob/520a1f8c10cd434c6dedd1e342285eecff8b9d1b/centreon/plugins/http.pm#L59\n    $self->{http} = centreon::plugins::http->new(%options);\n    return $self;\n}\n")),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"check_options")," function. This sub will execute right after ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," and allow you to check that the user passed\nmandatory parameter(s) and in some case check that the format is correct."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"sub check_options {\n    my ($self, %options) = @_;\n    $self->SUPER::check_options(%options);\n\n    # Check if the user provided a value for --hostname option. If not, display a message and exit\n    if (!defined($self->{option_results}->{hostname}) || $self->{option_results}->{hostname} eq '') {\n        $self->{output}->add_option_msg(short_msg => 'Please set hostname option');\n        $self->{output}->option_exit();\n    }\n    # Set parameters for http module, note that the $self->{option_results} is a hash containing\n    # all your options key/value pairs.\n    $self->{http}->set_options(%{$self->{option_results}});\n}\n\n1;\n")),(0,a.kt)("p",null,"Nice work, you now have a mode that can be executed without errors!"),(0,a.kt)("p",null,"Run this command ",(0,a.kt)("inlineCode",{parentName:"p"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics"),", which\noutputs this message:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UNKNOWN: Please set hostname option")),(0,a.kt)("p",null,"Now let's do some monitoring thanks to centreon-plugins."),(0,a.kt)("h4",{id:"declare-your-counters"},"Declare your counters"),(0,a.kt)("p",null,"This part essentially maps the data you want to get from the API with the internal\ncounter mode structure."),(0,a.kt)("p",null,"Remember how we categorized the data in a previous ",(0,a.kt)("a",{parentName:"p",href:"#understand-the-data"},"section"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"$self->{maps_counters_type}")," data structure describes these data while the ",(0,a.kt)("inlineCode",{parentName:"p"},"$self->{maps_counters}->{global}")," one defines\ntheir properties like thresholds and how they will be displayed to the users."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"sub set_counters {\n    my ($self, %options) = @_;\n\n    $self->{maps_counters_type} = [\n        # health and queries are global metric, they don't refer to a specific instance.\n        # In other words, you cannot get several values for health or queries\n        # That's why the type is 0.\n        { name => 'health', type => 0, cb_prefix_output => 'prefix_health_output' },\n        { name => 'queries', type => 0, cb_prefix_output => 'prefix_queries_output' },\n        # app_metrics groups connections and errors and each will receive value for both instances (my-awesome-frontend and my-awesome-db)\n        # the type => 1 explicits that\n        # as above, you can define a callback (cb) function to manage the output prefix. This function is called\n        # each time a value is passed to the counter and can be shared across multiple counters.\n        { name => 'app_metrics', type => 1, cb_prefix_output => 'prefix_app_output' }\n    ];\n\n    $self->{maps_counters}->{health} = [\n        # This counter is specific because it deals with a string value\n        {\n            label => 'health',\n            # All properties below (before et) are related to the catalog_status_ng catalog function imported at the top of our mode\n            type => 2,\n            # These properties allow you to define default thresholds for each status but not mandatory.\n            warning_default => '%{health} =~ /yellow/',\n            critical_default => '%{health} =~ /red/',\n            # To simplify, manage things related to how get value in the counter, what to display and specific threshold\n            # check because of the type of the data (string)\n            set => {\n                key_values => [ { name => 'health' } ],\n                output_template => 'status: %s',\n                # Force ignoring perfdata as the collected data is a string\n                closure_custom_perfdata => sub { return 0; },\n                closure_custom_threshold_check => \\&catalog_status_threshold_ng\n            }\n        }\n    ];\n    $self->{maps_counters}->{queries} = [\n        # The label defines options name, a --warning-select and --critical-select will be added to the mode\n        # The nlabel is the name of your performance data / metric that will show up in your graph\n        {\n            label => 'select',\n            nlabel => 'myawesomeapp.db.queries.select.count',\n            set => {\n            # Key value name is the name we will use to pass the data to this counter. You can have several ones.\n                key_values => [ { name => 'select' } ],\n                # Output template describe how the value will display\n                output_template => 'select: %s',\n                # Perfdata array allow you to define relevant metrics properties (min, max) and its sprintf template format\n                perfdatas => [\n                    { template => '%d', min => 0 }\n                ]\n            }\n        },\n        { label => 'update', nlabel => 'myawesomeapp.db.queries.update.count', set => {\n                key_values => [ { name => 'update' } ],\n                output_template => 'update: %s',\n                perfdatas => [\n                    { template => '%d', min => 0 }\n                ]\n            }\n        },\n        { label => 'delete', nlabel => 'myawesomeapp.db.queries.delete.count', set => {\n                key_values => [ { name => 'delete' } ],\n                output_template => 'delete: %s',\n                perfdatas => [\n                    { template => '%d', min => 0 }\n                ]\n            }\n        }\n    ];\n    $self->{maps_counters}->{app_metrics} = [\n        # The app_metrics has two different labels, connection and errors.\n        { label => 'connections', nlabel => 'myawesomeapp.connections.count', set => {\n                # pay attention the extra display key_value. It will receive the instance value. (my-awesome-db, my-awesome-frontend).\n                # the display key_value isn't mandatory but we show it here for education purpose\n                key_values => [ { name => 'connections' }, { name => 'display' } ],\n                output_template => 'connections: %s',\n                perfdatas => [\n                    # we add the label_extra_instance option to have one perfdata per instance\n                    { template => '%d', min => 0, label_extra_instance => 1 }\n                ]\n            }\n        },\n        { label => 'errors', nlabel => 'myawesomeapp.errors.count', set => {\n                key_values => [ { name => 'errors' }, { name => 'display' } ],\n                output_template => 'errors: %s',\n                perfdatas => [\n                    { template => '%d', min => 0, label_extra_instance => 1 }\n                ]\n            }\n        }\n    ];\n}\n\n# This should always be present at the end of the script.\n1;\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Remember to always move the final ",(0,a.kt)("inlineCode",{parentName:"p"},"1;")," instruction at the end of the script when you add new lines during this tutorial.")),(0,a.kt)("p",null,"The mode compiles. Run the command\nsupplying a value to the ",(0,a.kt)("inlineCode",{parentName:"p"},"--hostname")," option to see what it displays:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=fakehost\nOK: status : skipped (no value(s)) - select : skipped (no value(s)), update : skipped (no value(s)), delete : skipped (no value(s))\n")),(0,a.kt)("p",null,"You can see some of your counters with the ",(0,a.kt)("inlineCode",{parentName:"p"},"skipped (no value(s))"),", it's normal, this is because we\njust created the counters definition and structure but didn't push any values into it."),(0,a.kt)("h4",{id:"create-prefix-callback-functions"},"Create prefix callback functions"),(0,a.kt)("p",null,"These functions are not mandatory but help to make the output more readable for a human. We will create\nit now but as you have noticed the mode compiles so you can choose to keep those for the polishing moment."),(0,a.kt)("p",null,"During counters definitions, we associated a callback function to each of them:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cb_prefix_output => 'prefix_health_output'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cb_prefix_output => 'prefix_queries_output'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cb_prefix_output => 'prefix_app_output'"))),(0,a.kt)("p",null,"Define those functions by adding it to our ",(0,a.kt)("inlineCode",{parentName:"p"},"appmetrics.pm")," file. They are self-explanatory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"sub prefix_health_output {\n    my ($self, %options) = @_;\n\n    return 'My-awesome-app:';\n}\n\nsub prefix_queries_output {\n    my ($self, %options) = @_;\n\n    return 'Queries:';\n}\n\nsub prefix_app_output {\n    my ($self, %options) = @_;\n\n    # This notation allows you to return the value of the instance (the display key_value)\n    # to bring some context to the output.\n    return \"'\" . $options{instance_value}->{display} . \"' \";\n}\n\n1;\n")),(0,a.kt)("p",null,"Execute your command and check that the output matches the one below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=fakehost\nOK: My-awesome-app: status : skipped (no value(s)) - Queries: select : skipped (no value(s)), update : skipped (no value(s)), delete : skipped (no value(s))\n")),(0,a.kt)("p",null,"The output is easier to read and separators are visible between global counters."),(0,a.kt)("h4",{id:"get-raw-data-from-api-and-understand-the-data-structure"},"Get raw data from API and understand the data structure"),(0,a.kt)("p",null,"It's the moment to write the main sub (",(0,a.kt)("inlineCode",{parentName:"p"},"manage_selection"),") - the most complex, but also the one that\nwill transform your mode to something useful and alive."),(0,a.kt)("p",null,"Think about the logic, what we have to do is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Connect to ",(0,a.kt)("strong",{parentName:"li"},"run.mocky.io")," over HTTPS"),(0,a.kt)("li",{parentName:"ul"},"Query a specific path corresponding to our API"),(0,a.kt)("li",{parentName:"ul"},"Store and process the result"),(0,a.kt)("li",{parentName:"ul"},"Spread this result across counters definitions")),(0,a.kt)("p",null,"Start by writing the code to connect to ",(0,a.kt)("strong",{parentName:"p"},"run.mocky.io"),". It is where the centreon-plugins\nframework delivers its power."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"All print instructions are available as commented code in the GitHub tutorial resources.")),(0,a.kt)("p",null,"Write the request and add a print to display the received data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"sub manage_selection {\n    my ($self, %options) = @_;\n    # We have already loaded all things required for the http module\n    # Use the request method from the module to run the GET request against the path\n    my ($content) = $self->{http}->request(url_path => '/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656');\n    print $content . \"\\n\";\n}\n\n1;\n")),(0,a.kt)("p",null,"Run this command ",(0,a.kt)("inlineCode",{parentName:"p"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=run.mocky.io"),". "),(0,a.kt)("p",null,"The output should be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl",metastring:'title="Basic raw content print"',title:'"Basic',raw:!0,content:!0,'print"':!0},'{\n    "health": "yellow",\n    "db_queries":{\n         "select": 1230,\n         "update": 640,\n         "delete": 44\n    },\n    "connections":[\n      {\n        "component": "my-awesome-frontend",\n        "value": 122\n      },\n      {\n        "component": "my-awesome-db",\n        "value": 92\n      }\n    ],\n    "errors":[\n      {\n        "component": "my-awesome-frontend",\n        "value": 32\n      },\n      {\n        "component": "my-awesome-db",\n        "value": 27\n      }\n    ]\n}\nOK: My-awesome-app: status : skipped (no value(s)) - Queries: select : skipped (no value(s)), update : skipped (no value(s)), delete : skipped (no value(s))\n')),(0,a.kt)("p",null,"Add an ",(0,a.kt)("inlineCode",{parentName:"p"},"eval")," structure to transform ",(0,a.kt)("inlineCode",{parentName:"p"},"$content")," into a data structure that can be easily manipulated with perl. Let's\nintroduce the standard ",(0,a.kt)("inlineCode",{parentName:"p"},"Data::Dumper")," library that can help understanding your data structures."),(0,a.kt)("p",null,"We load the Data::Dumper library and use one of its methods to print the JSON. A second line is here to print\na simple message and get you familiar with how to access data within perl data structures."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},'sub manage_selection {\n    my ($self, %options) = @_;\n    # We have already loaded all things required for the http module\n    # Use the request method from the imported module to run the GET request against the URL path of our API\n    my ($content) = $self->{http}->request(url_path => \'/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656\');\n\n    # Declare a scalar deserialize the JSON content string into a perl data structure\n    my $decoded_content;\n    eval {\n        $decoded_content = JSON::XS->new->decode($content);\n    };\n    # Catch the error that may arise in case the data received is not JSON\n    if ($@) {\n        $self->{output}->add_option_msg(short_msg => "Cannot encode JSON result");\n        $self->{output}->option_exit();\n    }\n    use Data::Dumper;\n    print Dumper($decoded_content);\n    print "My App health is \'" . $decoded_content->{health} . "\'\\n";\n}\n\n1;\n')),(0,a.kt)("p",null,"Run the command ",(0,a.kt)("inlineCode",{parentName:"p"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=run.mocky.io"),"\nagain and see how it changed."),(0,a.kt)("p",null,"You now have your JSON deserialized into a perl ",(0,a.kt)("inlineCode",{parentName:"p"},"$VAR1")," which represents your ",(0,a.kt)("inlineCode",{parentName:"p"},"$decoded_content")," structure."),(0,a.kt)("p",null,"You can also note the result of the latest print and how we accessed the ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow")," value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:'tile="Perl data structure from JSON"',tile:'"Perl',data:!0,structure:!0,from:!0,'JSON"':!0},"$VAR1 = {\n          'connections' => [\n                             {\n                               'component' => 'my-awesome-frontend',\n                               'value' => 122\n                             },\n                             {\n                               'value' => 92,\n                               'component' => 'my-awesome-db'\n                             }\n                           ],\n          'health' => 'yellow',\n          'errors' => [\n                        {\n                          'value' => 32,\n                          'component' => 'my-awesome-frontend'\n                        },\n                        {\n                          'value' => 27,\n                          'component' => 'my-awesome-db'\n                        }\n                      ],\n          'db_queries' => {\n                            'select' => 1230,\n                            'update' => 640,\n                            'delete' => 44\n                          }\n        };\nMy App health is 'yellow'\n")),(0,a.kt)("h4",{id:"push-data-to-global-counters-type--0"},"Push data to global counters (type => 0)"),(0,a.kt)("p",null,"Now that we know our data structure and how to access the values, we have to assign this\nvalue to the counters we initially defined. Pay attention to the comments above\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"$self->{health}")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$self->{db_queries}")," assignations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl",metastring:'title="Global counters (type => 0)"',title:'"Global',counters:!0,"(type":!0,"":">",'0)"':!0},'sub manage_selection {\n    my ($self, %options) = @_;\n    # We have already loaded all things required for the http module\n    # Use the request method from the imported module to run the GET request against the URL path of our API\n    my ($content) = $self->{http}->request(url_path => \'/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656\');\n    # Uncomment the line below when you reached this part of the tutorial.\n    # print $content;\n\n    # Declare a scalar deserialize the JSON content string into a perl data structure\n    my $decoded_content;\n    eval {\n        $decoded_content = JSON::XS->new->decode($content);\n    };\n    # Catch the error that may arise in case the data received is not JSON\n    if ($@) {\n        $self->{output}->add_option_msg(short_msg => "Cannot encode JSON result");\n        $self->{output}->option_exit();\n    }\n    # Uncomment the lines below when you reached this part of the tutorial.\n    # use Data::Dumper;\n    # print Dumper($decoded_content);\n    # print "My App health is \'" . $decoded_content->{health} . "\'\\n";\n\n    # Here is where the counter magic happens.\n\n    # $self->{health} is your counter definition (see $self->{maps_counters}->{<name>})\n    # Here, we map the obtained string $decoded_content->{health} with the health key_value in the counter.\n    $self->{health} = {\n        health => $decoded_content->{health}\n    };\n\n    # $self->{queries} is your counter definition (see $self->{maps_counters}->{<name>})\n    # Here, we map the obtained values from the db_queries nodes with the key_value defined in the counter.\n    $self->{queries} = {\n        select => $decoded_content->{db_queries}->{select},\n        update => $decoded_content->{db_queries}->{update},\n        delete => $decoded_content->{db_queries}->{delete}\n    };\n\n}\n\n1;\n')),(0,a.kt)("p",null,"Let's run our command again: no more ",(0,a.kt)("inlineCode",{parentName:"p"},"skipped (no value(s))")," message. You even get a\nWARNING state because of the ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow")," app state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=run.mocky.io\nWARNING: My-awesome-app status: yellow | 'myawesomeapp.db.queries.select.count'=1230;;;0; 'myawesomeapp.db.queries.update.count'=640;;;0; 'myawesomeapp.db.queries.delete.count'=44;;;0;\n")),(0,a.kt)("p",null,"Performance data confirm that values for database queries are correctly set as well."),(0,a.kt)("p",null,"This is how the counters mode template work (",(0,a.kt)("inlineCode",{parentName:"p"},"use base qw(centreon::plugins::templates::counter);"),"), the only thing you have\nto do is getting the data from the thing you have to monitor and push it to a counter definition."),(0,a.kt)("p",null,"Behind the scenes, it manages a lot of things for you:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Options: ",(0,a.kt)("inlineCode",{parentName:"li"},"--warning-health --warning-select --warning-update --warning-delete and --critical-")," have automatically been defined"),(0,a.kt)("li",{parentName:"ul"},"Performance data: thanks to ",(0,a.kt)("inlineCode",{parentName:"li"},"nlabel")," and values from ",(0,a.kt)("inlineCode",{parentName:"li"},"perfdatas:[]")," array in your counters"),(0,a.kt)("li",{parentName:"ul"},"Display: It writes the status and substitutes values with the one assigned to the counter")),(0,a.kt)("p",null,"Now, you probably understand better why the preparation work about understanding collected data and the counter definition part is essential: simply because it's the bigger part of the job."),(0,a.kt)("h4",{id:"push-data-to-counters-having-an-instance-type--1"},"Push data to counters having an instance (type => 1)"),(0,a.kt)("p",null,"Now let's deal with counters with instances. That means that the same counters will\nreceive multiple data, each of these data refering to a specific dimension."),(0,a.kt)("p",null,"They require to be manipulated in a slightly different way as we will have to specify the\nname we want to associate with the data."),(0,a.kt)("p",null,"First, we have to loop over both ",(0,a.kt)("inlineCode",{parentName:"p"},"connections")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"errors")," arrays to access the app name and\nmeasured value and then spread it within counters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl",metastring:'title="Counters with instances (type 1)"',title:'"Counters',with:!0,instances:!0,"(type":!0,'1)"':!0},'sub manage_selection {\n    my ($self, %options) = @_;\n    # We have already loaded all things required for the http module\n    # Use the request method from the imported module to run the GET request against the URL path of our API\n    my ($content) = $self->{http}->request(url_path => \'/v3/da8d5aa7-abb4-4a5f-a31c-6700dd34a656\');\n    # Uncomment the line below when you reached this part of the tutorial.\n    # print $content;\n\n    # Declare a scalar deserialize the JSON content string into a perl data structure\n    my $decoded_content;\n    eval {\n        $decoded_content = JSON::XS->new->decode($content);\n    };\n    # Catch the error that may arise in case the data received is not JSON\n    if ($@) {\n        $self->{output}->add_option_msg(short_msg => "Cannot encode JSON result");\n        $self->{output}->option_exit();\n    }\n    # Uncomment the lines below when you reached this part of the tutorial.\n    # use Data::Dumper;\n    # print Dumper($decoded_content);\n    # print "My App health is \'" . $decoded_content->{health} . "\'\\n";\n\n    # Here is where the counter magic happens.\n\n    # $self->{health} is your counter definition (see $self->{maps_counters}->{<name>})\n    # Here, we map the obtained string $decoded_content->{health} with the health key_value in the counter.\n    $self->{health} = {\n        health => $decoded_content->{health}\n    };\n\n    # $self->{queries} is your counter definition (see $self->{maps_counters}->{<name>})\n    # Here, we map the obtained values from the db_queries nodes with the key_value defined in the counter.\n    $self->{queries} = {\n        select => $decoded_content->{db_queries}->{select},\n        update => $decoded_content->{db_queries}->{update},\n        delete => $decoded_content->{db_queries}->{delete}\n    };\n\n    # Initialize an empty app_metrics counter.\n    $self->{app_metrics} = {};\n    # Loop in the connections array of hashes\n    foreach my $entry (@{ $decoded_content->{connections} }) {\n        # Same logic than type => 0 counters but an extra key $entry->{component} to associate the value\n        # with a specific instance\n        $self->{app_metrics}->{ $entry->{component} }->{display} = $entry->{component};\n        $self->{app_metrics}->{ $entry->{component} }->{connections} = $entry->{value};\n    };\n\n    # Exactly the same thing with errors\n    foreach my $entry (@{ $decoded_content->{errors} }) {\n        # Don\'t need to redefine the display key, just assign a value to the error key_value while\n        # keeping the $entry->{component} key to associate the value with the good instance\n        $self->{app_metrics}->{ $entry->{component} }->{errors} = $entry->{value};\n    };\n\n}\n\n1;\n')),(0,a.kt)("p",null,"Your ",(0,a.kt)("inlineCode",{parentName:"p"},"app-metrics")," mode is (almost) complete. Once again, the counters template managed a lot\nbehind the scenes."),(0,a.kt)("p",null,"Execute this command to see how it evolved since the last execution. We modify the command with some\nadditional parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--warning-health='%{health} eq \"care\"'")," to avoid getting a WARNING, put any value that will not match yellow. Providing it\nas a parameter will automatically override the hardcoded default code value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--verbose")," will display the long output and the details for each ",(0,a.kt)("inlineCode",{parentName:"li"},"type => 1")," counters")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname=run.mocky.io --warning-health='%{health} eq \"care\"' --verbose\n")),(0,a.kt)("p",null,"Here is the expected output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"OK: My-awesome-app status: yellow - Queries: select: 1230, update: 640, delete: 44 | 'myawesomeapp.db.queries.select.count'=1230;;;0; 'myawesomeapp.db.queries.update.count'=640;;;0; 'myawesomeapp.db.queries.delete.count'=44;;;0; 'my-awesome-db#myawesomeapp.connections.count'=92;;;0; 'my-awesome-db#myawesomeapp.errors.count'=27;;;0; 'my-awesome-frontend#myawesomeapp.connections.count'=122;;;0; 'my-awesome-frontend#myawesomeapp.errors.count'=32;;;0;\n'my-awesome-db' connections: 92, errors: 27\n'my-awesome-frontend' connections: 122, errors: 32\n")),(0,a.kt)("p",null,"You now get metrics displayed for both components ",(0,a.kt)("inlineCode",{parentName:"p"},"'my-awesome-db'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'my-awesome-frontend'")," and also performance data\nfor your graphs. Note how the counter template automatically added the instance dimension on the left of the ",(0,a.kt)("inlineCode",{parentName:"p"},"nlabel")," defined\nfor each counters: ",(0,a.kt)("inlineCode",{parentName:"p"},"**my-awesome-frontend#**myawesomeapp.errors.count'=32;;;0;")),(0,a.kt)("h4",{id:"help-section-and-assistant-to-build-your-centreon-objects"},"Help section and assistant to build your centreon objects"),(0,a.kt)("p",null,"Last but not least, you need to write a help section to explain users what your mode is\ndoing and what options they can use."),(0,a.kt)("p",null,"The centreon-plugins framework has a built-in assistant to help you with the list of counters\nand options."),(0,a.kt)("p",null,"Run this command to obtain a summary that will simplify the work of creating Centreon commands and write\nthe mode's help:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --hostname='anyvalue' --list-coun\nters --verbose\n")),(0,a.kt)("p",null,"Get information from its output (shown below) to start building your mode's help:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"counter list: select update delete health connections errors\nconfiguration:  --warning-select='$_SERVICEWARNINGSELECT$' --critical-select='$_SERVICECRITICALSELECT$' --warning-update='$_SERVICEWARNINGUPDATE$' --critical-update='$_SERVICECRITICALUPDATE$' --warning-delete='$_SERVICEWARNINGDELETE$' --critical-delete='$_SERVICECRITICALDELETE$' --warning-health='$_SERVICEWARNINGHEALTH$' --critical-health='$_SERVICECRITICALHEALTH$' --warning-connections='$_SERVICEWARNINGCONNECTIONS$' --critical-connections='$_SERVICECRITICALCONNECTIONS$' --warning-errors='$_SERVICEWARNINGERRORS$' --critical-errors='$_SERVICECRITICALERRORS$'\n")),(0,a.kt)("p",null,"Here is how you can write the help, note that this time you will add the content after the ",(0,a.kt)("inlineCode",{parentName:"p"},"1;")," and add the same\n",(0,a.kt)("inlineCode",{parentName:"p"},"__END__")," instruction like you did in the ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin.pm")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl",metastring:'title="Help section"',title:'"Help','section"':!0},"__END__\n\n=head1 MODE\n\nCheck my-awesome-app metrics exposed through its API\n\n=over 8\n\n=item B<--warning/critical-health>\n\nWarning and critical threshold for application health string.\n\nDefaults values are: --warning-health='%{health} eq \"yellow\"' --critical-health='%{health} eq \"red\"'\n\n=item B<--warning/critical-select>\n\nWarning and critical threshold for select queries\n\n=item B<--warning/critical-update>\n\nWarning and critical threshold for update queries\n\n=item B<--warning/critical-delete>\n\nWarning and critical threshold for delete queries\n\n=item B<--warning/critical-connections>\n\nWarning and critical threshold for connections\n\n=item B<--warning/critical-errors>\n\nWarning and critical threshold for errors\n\n=back\n")),(0,a.kt)("p",null,"You're done! You can enjoy a complete plugin and mode and the help now displays in a specific\nmode section:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"perl centreon_plugins.pl --plugin=apps::myawesomeapp::api::plugin --mode=app-metrics --help\n[..\n   All global options from the centreon-plugins framework that your plugin benefits from\n..]\nMode:\n    Check my-awesome-app metrics exposed through its API\n\n    --warning/critical-health\n            Warning and critical threshold for application health string.\n\n            Defaults are: --warning-health='%{health} eq \"yellow\"' &\n            --critical-health='%{health} eq \"red\"'\n\n    --warning/critical-select\n            Warning and critical threshold for select queries\n\n    --warning/critical-update\n            Warning and critical threshold for update queries\n\n    --warning/critical-delete\n            Warning and critical threshold for delete queries\n\n    --warning/critical-connections\n            Warning and critical threshold for connections\n\n    --warning/critical-errors\n            Warning and critical threshold for errors\n")))}k.isMDXComponent=!0},42733:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/00_dev-resources_centreon-plugins-fork-0c1e719ae7c9da93502f4327515afaa4.png"}}]);