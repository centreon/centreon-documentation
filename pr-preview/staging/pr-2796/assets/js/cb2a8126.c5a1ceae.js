"use strict";(self.webpackChunkcentreon_docs=self.webpackChunkcentreon_docs||[]).push([[73708],{15818:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>f,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>h});n(67294);var o=n(3905);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):function(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})),t}function a(t,e){if(null==t)return{};var n,o,i=function(t,e){if(null==t)return{};var n,o,i={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}const s={id:"notif-concept",title:"How notifications work"},c=void 0,l={unversionedId:"alerts-notifications/notif-concept",id:"version-23.10/alerts-notifications/notif-concept",title:"How notifications work",description:"Before a contact can be notified in Centreon, it is necessary to go",source:"@site/versioned_docs/version-23.10/alerts-notifications/notif-concept.md",sourceDirName:"alerts-notifications",slug:"/alerts-notifications/notif-concept",permalink:"/centreon-documentation/pr-preview/staging/pr-2796/docs/alerts-notifications/notif-concept",draft:!1,editUrl:"https://github.com/centreon/centreon-documentation/edit/staging/versioned_docs/version-23.10/alerts-notifications/notif-concept.md",tags:[],version:"23.10",lastUpdatedAt:1699374559,formattedLastUpdatedAt:"Nov 7, 2023",frontMatter:{id:"notif-concept",title:"How notifications work"},sidebar:"version-23.10/docs",previous:{title:"Other actions",permalink:"/centreon-documentation/pr-preview/staging/pr-2796/docs/alerts-notifications/other"},next:{title:"Configuring notifications",permalink:"/centreon-documentation/pr-preview/staging/pr-2796/docs/alerts-notifications/notif-configuration"}},f={},h=[],p={toc:h},d="wrapper";function u(t){var{components:e}=t,s=a(t,["components"]);return(0,o.kt)(d,r(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),o.forEach((function(e){i(t,e,n[e])}))}return t}({},p,s),{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Before a contact can be notified in Centreon, it is necessary to go\nthrough several steps. If no notification escalation is defined, the\nnotification management process is standard. It is described below:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A service (or a host) is checked at regular intervals according to\nthe check period defined for it (In the case of a passive service,\nwe wait for the status of the service to change)"),(0,o.kt)("li",{parentName:"ol"},"If an anomaly occurs (Not-OK status), the service (or the host) goes\ninto the SOFT state"),(0,o.kt)("li",{parentName:"ol"},"After the Max Check Attempts have taken place and if the service (or\nthe host) persists in retaining its Not-OK status, its state changes\nfrom SOFT to HARD. The monitoring engine caches the notification\nnumber to the service (or the host): i.e. 0.")),(0,o.kt)("p",null,"At each notification interval of the service (or the host) and until the\nend of the Not-OK status, the monitoring engine performs the following\noperations:"),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"The monitoring engine checks that the notification period defined\nfor the service (or the host) allows the notification for the\nservice (or the host) when it is switched into the HARD state. If the\nanswer is yes, we go to the next step; otherwise, we wait for the period\ndefined for the service (or the host) to allow the notification."),(0,o.kt)("li",{parentName:"ol"},"The monitoring engine checks that the notification is enabled to the\ncurrent status of the service (or of the host)")),(0,o.kt)("p",null,"For every contact associated with the service (or the host):"),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The monitoring engine checks several settings:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Is notification to this contact enabled?"),(0,o.kt)("li",{parentName:"ul"},"Does the notification period defined for the contact allow\nnotification?"),(0,o.kt)("li",{parentName:"ul"},"Is the contact configured to be notified of the current status of\nthe service (or the host)?"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If these three conditions are confirmed, the monitoring engine\nalerts the contact using the notifications script defined for the\nservice or the host.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The monitoring engine increments the notification number by 1"))),(0,o.kt)("p",null,"The diagram below summarizes the notification management procedure in Centreon:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(64253).Z,width:"551",height:"1466"})))}u.isMDXComponent=!0},64253:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/hnotifications_schema-ab232ca2f342c2961b12af4af48cabc9.png"}}]);