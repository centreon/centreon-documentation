"use strict";(self.webpackChunkcentreon_docs=self.webpackChunkcentreon_docs||[]).push([[66563],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>g});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),g=o,m=d["".concat(s,".").concat(g)]||d[g]||p[g]||a;return r?t.createElement(m,l(l({ref:n},c),{},{components:r})):t.createElement(m,l({ref:n},c))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7626:(e,n,r)=>{r.d(n,{Z:()=>i});var t=r(67294),o=r(86010);const a="tabItem_Ymn6";function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},l.apply(this,arguments)}function i({children:e,hidden:n,className:r}){return t.createElement("div",l({role:"tabpanel",className:(0,o.Z)(a,r)},{hidden:n}),e)}},67709:(e,n,r)=>{r.d(n,{Z:()=>g});var t=r(67294),o=r(86010),a=r(90980),l=r(35715),i=r(8854),s=r(8241);const u="tabList__CuJ",c="tabItem_LNqP";function p(){return p=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},p.apply(this,arguments)}function d(e){var n;const{lazy:r,block:a,defaultValue:d,values:g,groupId:m,className:v}=e,f=t.Children.map(e.children,(e=>{if((0,t.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=null!=g?g:f.map((({props:{value:e,label:n,attributes:r}})=>({value:e,label:n,attributes:r}))),h=(0,l.l)(b,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);var k;const y=null===d?d:null!==(k=null!=d?d:null===(n=f.find((e=>e.props.default)))||void 0===n?void 0:n.props.value)&&void 0!==k?k:f[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:O,setTabGroupChoices:N}=(0,i.U)(),[w,C]=(0,t.useState)(y),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=m){const e=O[m];null!=e&&e!==w&&b.some((n=>n.value===e))&&C(e)}const E=e=>{const n=e.currentTarget,r=x.indexOf(n),t=b[r].value;t!==w&&(T(n),C(t),null!=m&&N(m,String(t)))},j=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;var r;n=null!==(r=x[t])&&void 0!==r?r:x[0];break}case"ArrowLeft":{const r=x.indexOf(e.currentTarget)-1;var t;n=null!==(t=x[r])&&void 0!==t?t:x[x.length-1];break}}null==n||n.focus()};return t.createElement("div",{className:(0,o.Z)("tabs-container",u)},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},v)},b.map((({value:e,label:n,attributes:r})=>t.createElement("li",p({role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,key:e,ref:e=>x.push(e),onKeyDown:j,onFocus:E,onClick:E},r,{className:(0,o.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":w===e})}),null!=n?n:e)))),r?(0,t.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):t.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function g(e){const n=(0,a.Z)();return t.createElement(d,p({key:String(n)},e))}},74627:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});r(67294);var t=r(3905),o=r(67709),a=r(7626);function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},l.apply(this,arguments)}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const s={id:"developer-gorgone-rebound-mode",title:"Configuring Gorgone in rebound mode"},u=void 0,c={unversionedId:"developer/developer-gorgone-rebound-mode",id:"version-23.10/developer/developer-gorgone-rebound-mode",title:"Configuring Gorgone in rebound mode",description:"This procedure describes how to configure Gorgone between a distant poller and a central server, via a rebound server.",source:"@site/versioned_docs/version-23.10/developer/developer-gorgone-rebound-mode.md",sourceDirName:"developer",slug:"/developer/developer-gorgone-rebound-mode",permalink:"/centreon-documentation/pr-preview/pr-2832/docs/developer/developer-gorgone-rebound-mode",draft:!1,editUrl:"https://github.com/centreon/centreon-documentation/edit/next/versioned_docs/version-23.10/developer/developer-gorgone-rebound-mode.md",tags:[],version:"23.10",lastUpdatedAt:1700565273,formattedLastUpdatedAt:"Nov 21, 2023",frontMatter:{id:"developer-gorgone-rebound-mode",title:"Configuring Gorgone in rebound mode"},sidebar:"version-23.10/docs",previous:{title:"Configuring Gorgone in pull mode",permalink:"/centreon-documentation/pr-preview/pr-2832/docs/developer/developer-gorgone-pull-mode"},next:{title:"Introduction",permalink:"/centreon-documentation/pr-preview/pr-2832/docs/api/introduction"}},p={},d=[{value:"On the distant poller side",id:"on-the-distant-poller-side",level:2},{value:"Installation requirements",id:"installation-requirements",level:3},{value:"Configuration",id:"configuration",level:3},{value:"On the rebound server side",id:"on-the-rebound-server-side",level:2},{value:"Installation requirements",id:"installation-requirements-1",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"On the central server side",id:"on-the-central-server-side",level:2},{value:"Installation requirements",id:"installation-requirements-2",level:3},{value:"Configuration",id:"configuration-2",level:3}],g={toc:d};function m(e){var{components:n}=e,r=i(e,["components"]);return(0,t.kt)("wrapper",l({},g,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"This procedure describes how to configure Gorgone between a distant poller and a central server, via a rebound server."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Note: In our case, we have the configuration described below (you have to adapt the procedure to your configuration).")),(0,t.kt)("p",null,"Central server:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"address: 10.30.2.203")),(0,t.kt)("p",null,"Rebound server:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"id: 1024 (This id is an arbitrary number and must be unique)."),(0,t.kt)("li",{parentName:"ul"},"address: 10.30.2.67"),(0,t.kt)("li",{parentName:"ul"},"rsa public key thumbprint: NmnPME43IoWpkQoam6CLnrI5hjmdq6Kq8QMUCCg-F4g")),(0,t.kt)("p",null,"Distant Poller:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"id: 6 (configured in Centreon interface as zmq. You can get this id from the Centreon interface)"),(0,t.kt)("li",{parentName:"ul"},"address: 10.30.2.179"),(0,t.kt)("li",{parentName:"ul"},"rsa public key thumbprint: nJSH9nZN2ugQeksHif7Jtv19RQA58yjxfX-Cpnhx09s")),(0,t.kt)("h2",l({},{id:"on-the-distant-poller-side"}),"On the distant poller side"),(0,t.kt)("h3",l({},{id:"installation-requirements"}),"Installation requirements"),(0,t.kt)("p",null,"Ensure the distant poller and Gorgone are already installed."),(0,t.kt)("h3",l({},{id:"configuration"}),"Configuration"),(0,t.kt)("p",null,"Configure the file ",(0,t.kt)("strong",{parentName:"p"},"/etc/centreon-gorgone/config.d/40-gorgoned.yaml")," as follows:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),'name:  distant-server\ndescription: Configuration for distant server\ngorgone:\n  gorgonecore:\n    id: 6\n    privkey: "/var/lib/centreon-gorgone/.keys/rsakey.priv.pem"\n    pubkey: "/var/lib/centreon-gorgone/.keys/rsakey.pub.pem"\n\n  modules:\n    - name: action\n      package: gorgone::modules::core::action::hooks\n      enable: true\n\n    - name: engine\n      package: gorgone::modules::centreon::engine::hooks\n      enable: true\n      command_file: "/var/lib/centreon-engine/rw/centengine.cmd"\n\n    - name: pull\n      package: "gorgone::modules::core::pull::hooks"\n      enable: true\n      target_type: tcp\n      target_path: 10.30.2.67:5556\n      ping: 1\n')),(0,t.kt)("h2",l({},{id:"on-the-rebound-server-side"}),"On the rebound server side"),(0,t.kt)("h3",l({},{id:"installation-requirements-1"}),"Installation requirements"),(0,t.kt)("p",null,"Ensure you have installed a server with a ",(0,t.kt)("a",l({parentName:"p"},{href:"/centreon-documentation/pr-preview/pr-2832/docs/installation/compatibility#operating-systems"}),"supported OS"),"."),(0,t.kt)("p",null,"Then install the Gorgone daemon using the following commands:"),(0,t.kt)(o.Z,{groupId:"sync",mdxType:"Tabs"},(0,t.kt)(a.Z,{value:"Alma / RHEL / Oracle Linux 8",label:"Alma / RHEL / Oracle Linux 8",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),"dnf config-manager --add-repo https://packages.centreon.com/rpm-standard/23.04/el8/centreon-23.04.repo\ndnf clean all --enablerepo=*\ndnf update\ndnf install centreon-gorgone\n"))),(0,t.kt)(a.Z,{value:"Alma / RHEL / Oracle Linux 9",label:"Alma / RHEL / Oracle Linux 9",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),"dnf config-manager --add-repo https://packages.centreon.com/rpm-standard/23.04/el9/centreon-23.04.repo\ndnf clean all --enablerepo=*\ndnf update\ndnf install centreon-gorgone\n"))),(0,t.kt)(a.Z,{value:"Debian 11",label:"Debian 11",mdxType:"TabItem"},(0,t.kt)("p",null,"To install the Centreon repository, execute the following command:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),'echo "deb https://packages.centreon.com/apt-standard-23.04-stable/ $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/centreon.list\necho "deb https://packages.centreon.com/apt-plugins-stable/ $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/centreon-plugins.list\n')),(0,t.kt)("p",null,"Then import the repository key:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),"wget -O- https://apt-key.centreon.com | gpg --dearmor | tee /etc/apt/trusted.gpg.d/centreon.gpg > /dev/null 2>&1\napt update\n")),(0,t.kt)("p",null,"Then install gorgone:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),"apt install centreon-gorgone\n")))),(0,t.kt)("h3",l({},{id:"configuration-1"}),"Configuration"),(0,t.kt)("p",null,"Configure the file ",(0,t.kt)("strong",{parentName:"p"},"/etc/centreon-gorgone/config.d/40-gorgoned.yaml")," as follows:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),'name:  rebound-server\ndescription: Configuration for rebound-server\ngorgone:\n  gorgonecore:\n    id: 1024\n    privkey: "/var/lib/centreon-gorgone/.keys/rsakey.priv.pem"\n    pubkey: "/var/lib/centreon-gorgone/.keys/rsakey.pub.pem"\n    external_com_type: tcp\n    external_com_path: "*:5556"\n    authorized_clients:\n        - key: nJSH9nZN2ugQeksHif7Jtv19RQA58yjxfX-Cpnhx09s\n\n  modules:\n    - name: proxy\n      package: "gorgone::modules::core::proxy::hooks"\n      enable: true\n\n    - name: pull\n      package: "gorgone::modules::core::pull::hooks"\n      enable: true\n      target_type: tcp\n      target_path: 10.30.2.203:5556\n      ping: 1\n')),(0,t.kt)("h2",l({},{id:"on-the-central-server-side"}),"On the central server side"),(0,t.kt)("h3",l({},{id:"installation-requirements-2"}),"Installation requirements"),(0,t.kt)("p",null,"Ensure the Central server and Gorgone are already installed."),(0,t.kt)("h3",l({},{id:"configuration-2"}),"Configuration"),(0,t.kt)("p",null,"Configure the file ",(0,t.kt)("strong",{parentName:"p"},"/etc/centreon-gorgone/config.d/40-gorgoned.yaml")," as follows:"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),'...\ngorgone:\n  gorgonecore:\n    ...\n    external_com_type: tcp\n    external_com_path: "*:5556"\n    authorized_clients:\n      - key: NmnPME43IoWpkQoam6CLnrI5hjmdq6Kq8QMUCCg-F4g\n    ...\n  modules:\n    ...\n    - name: register\n      package: "gorgone::modules::core::register::hooks"\n      enable: true\n      config_file: /etc/centreon-gorgone/nodes-register-override.yml\n    ...\n')),(0,t.kt)("p",null,"We created the file ",(0,t.kt)("strong",{parentName:"p"},"/etc/centreon-gorgone/nodes-register-override.yml"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",l({parentName:"pre"},{className:"language-shell"}),"nodes:\n  - id: 1024\n    type: pull\n    prevail: 1\n    nodes:\n      - id: 6\n        pathscore: 1\n")))}m.isMDXComponent=!0}}]);