"use strict";(self.webpackChunkcentreon_docs=self.webpackChunkcentreon_docs||[]).push([[76119],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},72539:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>p,metadata:()=>u,toc:()=>d});a(67294);var n=a(3905),r=a(67709),l=a(7626);function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const p={id:"applications-hashicorp-vault-restapi",title:"HashiCorp Vault Rest API"},s=void 0,u={unversionedId:"integrations/plugin-packs/procedures/applications-hashicorp-vault-restapi",id:"integrations/plugin-packs/procedures/applications-hashicorp-vault-restapi",title:"HashiCorp Vault Rest API",description:"Overview",source:"@site/pp/integrations/plugin-packs/procedures/applications-hashicorp-vault-restapi.md",sourceDirName:"integrations/plugin-packs/procedures",slug:"/integrations/plugin-packs/procedures/applications-hashicorp-vault-restapi",permalink:"/centreon-documentation/pr-preview/pr-2832/pp/integrations/plugin-packs/procedures/applications-hashicorp-vault-restapi",draft:!1,tags:[],version:"current",frontMatter:{id:"applications-hashicorp-vault-restapi",title:"HashiCorp Vault Rest API"},sidebar:"pp",previous:{title:"Haproxy SNMP",permalink:"/centreon-documentation/pr-preview/pr-2832/pp/integrations/plugin-packs/procedures/applications-haproxy-snmp"},next:{title:"Hddtemp TCP",permalink:"/centreon-documentation/pr-preview/pr-2832/pp/integrations/plugin-packs/procedures/applications-hddtemp-tcp"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Pack Assets",id:"pack-assets",level:2},{value:"Monitored Objects",id:"monitored-objects",level:3},{value:"Collected metrics &amp; status",id:"collected-metrics--status",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Host",id:"host",level:3},{value:"How to check in the CLI that the configuration is OK and what are the main options for ?",id:"how-to-check-in-the-cli-that-the-configuration-is-ok-and-what-are-the-main-options-for-",level:2},{value:"Troubleshooting",id:"troubleshooting",level:3}],m={toc:d};function h(e){var{components:t}=e,a=o(e,["components"]);return(0,n.kt)("wrapper",i({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",i({},{id:"overview"}),"Overview"),(0,n.kt)("p",null,"Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords\nor certificates. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log."),(0,n.kt)("p",null,"The Plugin Pack Centreon HashiCorp Vault relies on the Vault Rest API to collect status and metrics related to the Vault service."),(0,n.kt)("h2",i({},{id:"pack-assets"}),"Pack Assets"),(0,n.kt)("h3",i({},{id:"monitored-objects"}),"Monitored Objects"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"HashiCorp Vault instances",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Health"),(0,n.kt)("li",{parentName:"ul"},"Raft-Storage")))),(0,n.kt)("h3",i({},{id:"collected-metrics--status"}),"Collected metrics & status"),(0,n.kt)(r.Z,{groupId:"sync",mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"Health",label:"Health",mdxType:"TabItem"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Status Name"),(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"seal-status"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Seal status of the node")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"init-status"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Initialization status of the node"))))),(0,n.kt)(l.Z,{value:"Raft-Storage",label:"Raft-Storage",mdxType:"TabItem"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Metric Name"),(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Description"),(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Unit"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"vault.raftstorage.committime.seconds"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Average time to commit data to the Storage"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"s")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),(0,n.kt)("em",{parentName:"td"},"db_name"),"#vault.raftstorage.spilltime.seconds"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Average spill time"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"s")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),(0,n.kt)("em",{parentName:"td"},"db_name"),"#vault.raftstorage.rebalance_time.seconds"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Average rebalance_time"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"s")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),(0,n.kt)("em",{parentName:"td"},"db_name"),"#vault.raftstorage.write_time.seconds"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Average write time"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"s")))))),(0,n.kt)("h2",i({},{id:"prerequisites"}),"Prerequisites"),(0,n.kt)("p",null,"The Centreon Poller must be allowed to connect and to authenticate against the HashiCorp Vault resource.\nThe credentials used to authenticate must be part of a Vault policy allowing to read the ",(0,n.kt)("inlineCode",{parentName:"p"},"/sys/")," path."),(0,n.kt)("p",null,"The following authentication methods are supported:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"token (default method)"),(0,n.kt)("li",{parentName:"ul"},"userpass"),(0,n.kt)("li",{parentName:"ul"},"azure"),(0,n.kt)("li",{parentName:"ul"},"cert"),(0,n.kt)("li",{parentName:"ul"},"github"),(0,n.kt)("li",{parentName:"ul"},"ldap"),(0,n.kt)("li",{parentName:"ul"},"okta"),(0,n.kt)("li",{parentName:"ul"},"radius")),(0,n.kt)("p",null,"Depending of the chosen method, you will have to set the related parts of information in the ",(0,n.kt)("em",{parentName:"p"},"EXTRAOPTIONS")," Host Macro. Please refer to the Plugin\nhelp for more details (by adding the ",(0,n.kt)("inlineCode",{parentName:"p"},"--help")," parameter when executing the command).\nAll the options needed for each authentication method can be found on the official Vault documentation\n",(0,n.kt)("a",i({parentName:"p"},{href:"https://www.vaultproject.io/api-docs/auth"}),"https://www.vaultproject.io/api-docs/auth")," ."),(0,n.kt)("h2",i({},{id:"setup"}),"Setup"),(0,n.kt)(r.Z,{groupId:"sync",mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"Online License",label:"Online License",mdxType:"TabItem"},(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Install the Centreon Plugin package on every Centreon Poller expected to monitor HashiCorp Vault Rest API resources:")),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"yum install centreon-plugin-Applications-HashiCorp-Vault-Restapi\n")),(0,n.kt)("ol",i({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"On the Centreon Web interface, install the ",(0,n.kt)("em",{parentName:"li"},"HashiCorp Vault Rest API"),' Centreon Pack on the "Configuration > Plugin Packs > Manager" page'))),(0,n.kt)(l.Z,{value:"Offline License",label:"Offline License",mdxType:"TabItem"},(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Install the Centreon Plugin package on every Centreon Poller expected to monitor HashiCorp Vault Rest API resources:")),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"yum install centreon-plugin-Applications-HashiCorp-Vault-Restapi\n")),(0,n.kt)("ol",i({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"Install the Centreon Pack RPM on the Centreon Central server:")),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"yum install centreon-pack-applications-hashicorp-vault-restapi.noarch\n")),(0,n.kt)("ol",i({},{start:3}),(0,n.kt)("li",{parentName:"ol"},"On the Centreon Web interface, install the ",(0,n.kt)("em",{parentName:"li"},"HashiCorp Vault Rest API"),' Centreon Pack on the "Configuration > Plugin Packs > Manager" page')))),(0,n.kt)("h2",i({},{id:"configuration"}),"Configuration"),(0,n.kt)("h3",i({},{id:"host"}),"Host"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},'Log into Centreon and add a new Host through "Configuration > Hosts".')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"In the ",(0,n.kt)("em",{parentName:"p"},"IP Address/FQDN")," field, set the IP address corresponding to the HashiCorp Vault instance.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Select the ",(0,n.kt)("em",{parentName:"p"},"App-HashiCorp-Vault-Restapi-Custom")," template to apply to the Host.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Once the template applied, some Macros marked as 'Mandatory' hereafter have to be configured."))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Mandatory"),(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Nom"),(0,n.kt)("th",i({parentName:"tr"},{align:"left"}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"X"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"VAULTAPIPORT"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Vault API port (default: '8200')")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"X"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"VAULTAPIPROTOCOL"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Vault API protocol (default: 'http')")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"X"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"VAULTAPIVERSION"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Vault API version (default: 'v1')")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"X"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"VAULTAPIAUTHMETHOD"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"The method used to authenticate against the API (default: 'token')")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"})),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"VAULTTOKEN"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"The Vault token used to authenticate (if 'token' method is used)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",i({parentName:"tr"},{align:"left"})),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"EXTRAOPTIONS"),(0,n.kt)("td",i({parentName:"tr"},{align:"left"}),"Associated Resource Group if resource name is used")))),(0,n.kt)("h2",i({},{id:"how-to-check-in-the-cli-that-the-configuration-is-ok-and-what-are-the-main-options-for-"}),"How to check in the CLI that the configuration is OK and what are the main options for ?"),(0,n.kt)("p",null,"Once the Plugin installed, log into your Centreon Poller CLI using the ",(0,n.kt)("em",{parentName:"p"},"centreon-engine"),"\nuser account and test the Plugin by running the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"/usr/lib/centreon/plugins/centreon_hashicorp_vault_restapi.pl \\\n    --plugin=apps::hashicorp::vault::restapi::plugin \\\n    --mode=health \\\n    --hostname=10.0.0.1 \\\n    --api-port='8200' \\\n    --api-proto='http' \\\n    --auth-method='token' \\\n    --vault-token='s.1234567890abcd' \\\n    --critical-seal-status='%{sealed} ne \"unsealed\"' \\ \n    --critical-init-status='%{init} ne \"initialized\"'\n")),(0,n.kt)("p",null,"Expected command output is shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"OK: Server vault-cluster-12345abc seal status : unsealed, init status : initialized |\n")),(0,n.kt)("p",null,"The command above check the ",(0,n.kt)("em",{parentName:"p"},"health")," of a HashiCorp Vault instance reachable at ",(0,n.kt)("em",{parentName:"p"},"10.0.0.1")," (",(0,n.kt)("inlineCode",{parentName:"p"},"--plugin=cloud::azure::database::cosmosdb::plugin\n--mode=cpu --custommode=api"),"). To reach the API of the instance, the ",(0,n.kt)("em",{parentName:"p"},"HTTP")," protocol is used on the port ",(0,n.kt)("em",{parentName:"p"},"8200")," (",(0,n.kt)("inlineCode",{parentName:"p"},"-api-port='8200' --api-proto='http'"),")."),(0,n.kt)("p",null,"In this example, we use the ",(0,n.kt)("em",{parentName:"p"},"token")," authentication method with the related proper Vault token (",(0,n.kt)("inlineCode",{parentName:"p"},"--auth-method='token' --vault-token='s.1234567890abcd'"),")."),(0,n.kt)("p",null,"This command would trigger a CRITICAL alarm:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"if the seal status of the instance differs from 'unsealed' (",(0,n.kt)("inlineCode",{parentName:"li"},"--critical-seal-status='%{sealed} ne \"unsealed\"'"),")"),(0,n.kt)("li",{parentName:"ul"},"if the instance returns a initialization status different from 'initialized' (",(0,n.kt)("inlineCode",{parentName:"li"},'--critical-init-status=\'%{init} ne "initialized"'),")")),(0,n.kt)("p",null,"All the available options for a given mode can be displayed by adding the ",(0,n.kt)("inlineCode",{parentName:"p"},"--help")," parameter to the command:"),(0,n.kt)("pre",null,(0,n.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"/usr/lib/centreon/plugins/centreon_hashicorp_vault_restapi.pl \\\n    --plugin=apps::hashicorp::vault::restapi::plugin \\\n    --mode=health \\\n    --help\n")),(0,n.kt)("h3",i({},{id:"troubleshooting"}),"Troubleshooting"),(0,n.kt)("p",null,"Please find all the troubleshooting documentation for the API-based Plugins in the ",(0,n.kt)("a",i({parentName:"p"},{href:"/centreon-documentation/pr-preview/pr-2832/pp/integrations/plugin-packs/getting-started/how-to-guides/troubleshooting-plugins#http-and-api-checks"}),"dedicated chapter"),"\nof the Centreon documentation."))}h.isMDXComponent=!0},7626:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o({children:e,hidden:t,className:a}){return n.createElement("div",i({role:"tabpanel",className:(0,r.Z)(l,a)},{hidden:t}),e)}},67709:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(67294),r=a(86010),l=a(90980),i=a(35715),o=a(8854),p=a(8241);const s="tabList__CuJ",u="tabItem_LNqP";function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},c.apply(this,arguments)}function d(e){var t;const{lazy:a,block:l,defaultValue:d,values:m,groupId:h,className:k}=e,f=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=null!=m?m:f.map((({props:{value:e,label:t,attributes:a}})=>({value:e,label:t,attributes:a}))),v=(0,i.l)(g,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);var b;const N=null===d?d:null!==(b=null!=d?d:null===(t=f.find((e=>e.props.default)))||void 0===t?void 0:t.props.value)&&void 0!==b?b:f[0].props.value;if(null!==N&&!g.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:O}=(0,o.U)(),[P,w]=(0,n.useState)(N),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=h){const e=y[h];null!=e&&e!==P&&g.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,a=C.indexOf(t),n=g[a].value;n!==P&&(T(t),w(n),null!=h&&O(h,String(n)))},A=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;var a;t=null!==(a=C[n])&&void 0!==a?a:C[0];break}case"ArrowLeft":{const a=C.indexOf(e.currentTarget)-1;var n;t=null!==(n=C[a])&&void 0!==n?n:C[C.length-1];break}}null==t||t.focus()};return n.createElement("div",{className:(0,r.Z)("tabs-container",s)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},k)},g.map((({value:e,label:t,attributes:a})=>n.createElement("li",c({role:"tab",tabIndex:P===e?0:-1,"aria-selected":P===e,key:e,ref:e=>C.push(e),onKeyDown:A,onFocus:I,onClick:I},a,{className:(0,r.Z)("tabs__item",u,null==a?void 0:a.className,{"tabs__item--active":P===e})}),null!=t?t:e)))),a?(0,n.cloneElement)(f.filter((e=>e.props.value===P))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==P})))))}function m(e){const t=(0,l.Z)();return n.createElement(d,c({key:String(t)},e))}}}]);