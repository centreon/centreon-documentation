name: documentation

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  push:
    branches:
      - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  get-versions:
    runs-on: ubuntu-22.04

    outputs:
      build_environments: ${{ steps.filters.outputs.build_environments }}
      build_versions: ${{ steps.filters.outputs.build_versions }}
      build_next_version: ${{ steps.filters.outputs.build_next_version }}
      build_pp: ${{ steps.filters.outputs.build_pp }}
      build_cloud: ${{ steps.filters.outputs.build_cloud }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          list-files: 'json'
          filters: |
            global:
              - babel.config.js
              - docusaurus.config.js
              - package.json
              - versions.json
              - yarn.lock
              - 'src/**'
              - 'static/**'
              - 'i18n/**/(code|footer|navbar).json'
              - 'i18n/**/index.js'
            cloud:
              - 'cloud/**'
              - 'i18n/**/docusaurus-plugin-content-docs-cloud/**'
            pp:
              - 'pp/**'
              - 'i18n/**/docusaurus-plugin-content-docs-pp/**'
            versions:
              - 'i18n/**/docusaurus-plugin-content-docs/**'
              - 'versioned_docs/**'
              - 'versioned_sidebars/**'

      - name: Manage versions to build
        uses: actions/github-script@v6
        id: filters
        with:
          script: |
            let build_versions = require('./versions.json');
            let build_next_version = require('./nextVersion.json').version;
            let build_pp = '1';
            let build_cloud = '1';

            if ('${{ github.event_name }}' === 'pull_request' && ${{ steps.changes.outputs.global }} === false) {
              if (${{ steps.changes.outputs.versions }} === false && ${{ steps.changes.outputs.pp }} === false) {
                build_pp = '0';
              }

              if (${{ steps.changes.outputs.versions }} === false && ${{ steps.changes.outputs.cloud }} === false) {
                build_cloud = '0';
              }

              if (${{ steps.changes.outputs.versions }} === true) {
                const available_versions = require('./versions.json');
                const next_version = require('./nextVersion.json').version;
                build_versions = [];
                build_next_version = null;
                ${{ steps.changes.outputs.versions_files }}.map((file) => {
                  [...file.matchAll(/(\d{2}\.(04|10))/g)].map((result) => {
                    if (available_versions.includes(result[1])) {
                      console.log(`Version ${result[1]} updated : ${file}`);
                      build_versions.push(result[1]);
                    }
                    if (next_version === result[1]) {
                      build_next_version = next_version;
                    }
                  });
                });
                build_versions = [...new Set(build_versions)].sort().reverse(); // remove duplicates and sort desc
              }
            }

            console.log(`Following versions will be built: ${build_versions.join(',')}`);
            console.log(`next version will${build_next_version === null ? ' not' : ''} be built`);
            console.log(`pp section will${build_pp === '0' ? ' not' : ''} be built`);
            console.log(`cloud section will${build_cloud === '0' ? ' not' : ''} be built`);

            const build_environments = [];
            if (build_versions.length) {
              build_environments.push('staging');
            }
            if (build_next_version !== null) {
              build_environments.push('next');
            }

            core.setOutput('build_environments', JSON.stringify(build_environments));
            core.setOutput('build_versions', build_versions.join(','));
            //core.setOutput('build_environments', JSON.stringify(build_environments));
            //core.setOutput('build_versions', JSON.stringify(build_versions));
            core.setOutput('build_next_version', build_next_version);
            core.setOutput('build_pp', build_pp);
            core.setOutput('build_cloud', build_cloud);

      - name: build comments
        uses: actions/github-script@v6
        with:
          script: |
            const preview_urls = ${{ steps.filters.outputs.build_environments }}.map((environment) => {
              return `:rocket: Deployed preview to https://centreon.github.io/centreon-documentation/pr-preview/${environment}/pr-${{ github.event.pull_request.number }}`;
            })

            core.exportVariable('datetime', new Date().toUTCString());
            core.exportVariable(
              'preview_urls',
              preview_urls.join('\n\n')
            );

      - name: Leave a comment after deployment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-preview
          message: |
            **PR Previews**

            :---:

            ${{ env.preview_urls }}

            on branch [`gh-pages`](${{ github.server_url }}/${{ github.repository }}/tree/gh-pages) at ${{ env.datetime }}
  build:
    runs-on: ubuntu-22.04
    needs: [get-versions]

    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.get-versions.outputs.build_environments) }}
        include:
          - versions: ${{ needs.get-versions.outputs.build_versions }}
            next_version: ${{ needs.get-versions.outputs.build_next_version }}
            pp: ${{ needs.get-versions.outputs.build_pp }}
            cloud: ${{ needs.get-versions.outputs.build_cloud }}

    name: Build ${{ matrix.environment }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        uses: borales/actions-yarn@v4
        with:
          cmd: install --frozen-lockfile

      - name: Build documentation
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        run: yarn build
        env:
          #PP: ${{ matrix.pp }}
          #CLOUD: ${{ matrix.cloud }}
          PP: 0
          CLOUD: 0
          VERSIONS: ${{ matrix.environment == 'staging' && matrix.versions || matrix.next_version }}
          BASE_URL: ${{ github.event_name == 'pull_request' && format('/centreon-documentation/pr-preview/{0}/pr-{1}', matrix.environment, github.event.pull_request.number) || '' }}

      - name: Store build in cache
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        uses: actions/cache/save@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-${{ matrix.environment }}"

  deploy-preview:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [get-versions, build]
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.get-versions.outputs.build_environments) }}

    name: deploy preview ${{ matrix.environment }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Restore build from cache
        if: ${{ github.event.action != 'closed' }}
        uses: actions/cache/restore@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-${{ matrix.environment }}"
          fail-on-cache-miss: true

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build
          preview-branch: gh-pages
          umbrella-dir: pr-preview/${{ matrix.environment }}
          action: auto

  comment-preview:
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
    needs: [get-versions, deploy-preview]
    runs-on: ubuntu-22.04

    steps:
      - name: Manage versions to build
        uses: actions/github-script@v6
        with:
          script: |
            const preview_urls = ${{ needs.get-versions.outputs.build_environments }}.map((environment) => {
              return `:rocket: Deployed preview to https://centreon.github.io/centreon-documentation/pr-preview/${environment}/pr-${{ github.event.pull_request.number }}`;
            })

            core.exportVariable('datetime', new Date().toUTCString());
            core.exportVariable('preview_urls',preview_urls.join('\n\n'));

      # - name: Store environment variables for comment
      #   run: |
      #     echo "datetime=$(date '+%Y-%m-%d %H:%M %Z')" >> $GITHUB_ENV
      #     {
      #       echo 'PREVIEW_URLS<<EOF'
      #       for environment in ${${{ needs.get-versions.outputs.build_environments }}//,/ } ; do
      #         echo :rocket: Deployed preview to https://centreon.github.io/centreon-documentation/pr-preview/$environment/pr-${{ github.event.pull_request.number }}
      #       done
      #       echo EOF
      #     } >> "$GITHUB_ENV"

      - name: Leave a comment after deployment
        if: ${{ github.event.action != 'closed' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-preview
          message: |
            "**PR Previews**

            :---:

            ${{ env.preview_urls }}

            on branch [`gh-pages`](${{ github.server_url }}/${{ github.repository }}/tree/gh-pages) at ${{ env.datetime }}"

  # deploy-staging:
  #   if: ${{ github.ref_name == 'staging' && github.event_name != 'pull_request' }}
  #   needs: [build]
  #   runs-on: [self-hosted, infra]

  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v4

  #     - name: Restore build from cache
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: "./build"
  #         key: "${{ github.sha }}-${{ github.run_id }}-build-doc"
  #         fail-on-cache-miss: true

  #     - name: Deploy to https://docs-staging.int.centreon.com
  #       run: |
  #         # Prepare ssh-key
  #         eval `ssh-agent`
  #         ssh-add - <<< "${{ secrets.INT_SSH_KEY }}"

  #         rsync -e "ssh -o StrictHostKeyChecking=no" -arzvh --delete build/* admin@docs-dev.int.centreon.com:/var/www/html/ \
  #         || rsync -e "ssh -o StrictHostKeyChecking=no" -arzvh --delete build/* admin@${{ secrets.DOC_DEV_IP_ADDRESS }}:/var/www/html/
  #       shell: bash

  # deploy-next:
  #   if: ${{ github.ref_name == 'next' && github.event_name != 'pull_request' }}
  #   needs: [build]
  #   runs-on: [self-hosted, infra]

  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v4

  #     - name: Restore build from cache
  #       if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: "./build"
  #         key: "${{ github.sha }}-${{ github.run_id }}-build-doc"
  #         fail-on-cache-miss: true

  #     - name: Setup awscli
  #       run: |
  #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #         sudo unzip -q awscliv2.zip
  #         sudo ./aws/install
  #       shell: bash

  #     - name: Deploy to https://docs-next-int.centreon.com
  #       run: |
  #         export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
  #         $(aws sts assume-role \
  #         --role-arn ${{ secrets.CLOUDFRONT_ROLE_DOC_PRODUCTION }} \
  #         --role-session-name InvalidDocCache \
  #         --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
  #         --output text))

  #         aws s3 sync --delete build s3://centreon-documentation-next/

  #         aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID_DOC_NEXT }} --paths "/*"
  #       shell: bash
