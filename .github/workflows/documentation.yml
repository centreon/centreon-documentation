name: documentation

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  push:
    branches:
      - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  get-versions:
    runs-on: ubuntu-22.04

    name: Get versions

    outputs:
      build_environments: ${{ steps.filters.outputs.build_environments }}
      build_versions: ${{ steps.filters.outputs.build_versions }}
      build_next_version: ${{ steps.filters.outputs.build_next_version }}
      build_pp: ${{ steps.filters.outputs.build_pp }}
      build_cloud: ${{ steps.filters.outputs.build_cloud }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ github.token }}
          list-files: 'json'
          filters: |
            global:
              - babel.config.js
              - docusaurus.config.js
              - package.json
              - versions.json
              - nextVersion.json
              - yarn.lock
              - 'src/**'
              - 'static/**'
              - 'i18n/**/(code|footer|navbar).json'
              - 'i18n/**/index.js'
            cloud:
              - 'cloud/**'
              - 'i18n/**/docusaurus-plugin-content-docs-cloud/**'
            pp:
              - 'pp/**'
              - 'i18n/**/docusaurus-plugin-content-docs-pp/**'
            versions:
              - 'i18n/**/docusaurus-plugin-content-docs/**'
              - 'versioned_docs/**'
              - 'versioned_sidebars/**'

      - name: Manage versions to build
        uses: actions/github-script@v6
        if: ${{ steps.changes.outputs.global == 'false' }}
        with:
          script: |
            const available_versions = require('./versions.json');
            let build_next_version = require('./nextVersion.json').version;
            let build_versions = [...available_versions];
            if (build_versions.includes(build_next_version)) {
              build_versions.splice(build_versions.indexOf(build_next_version), 1);
            }
            let build_pp = '1';
            let build_cloud = '1';

            if ('${{ github.event_name }}' === 'pull_request' && ${{ steps.changes.outputs.global }} === false) {
              if (${{ steps.changes.outputs.versions }} === false && ${{ steps.changes.outputs.pp }} === false) {
                build_pp = '0';
              }

              if (${{ steps.changes.outputs.versions }} === false && ${{ steps.changes.outputs.cloud }} === false) {
                build_cloud = '0';
              }

              build_versions = [];
              build_next_version = null;
              if (${{ steps.changes.outputs.versions }} === true) {
                const next_version = require('./nextVersion.json').version;
                ${{ steps.changes.outputs.versions_files }}.map((file) => {
                  [...file.matchAll(/(\d{2}\.(04|10))/g)].map((result) => {
                    console.log(`Version ${result[1]} updated : ${file}`);
                    if (next_version === result[1]) {
                      build_next_version = next_version;
                    } else if (available_versions.includes(result[1])) {
                      build_versions.push(result[1]);
                    }
                  });
                });
                build_versions = [...new Set(build_versions)].sort().reverse(); // remove duplicates and sort desc
              }

              if (build_versions.length === 0 && (build_pp === '1' || build_cloud === '1')) {
                build_versions.push(available_versions[0]);
              }
            }

            console.log(`Following versions will be built: ${build_versions.join(',')}`);
            console.log(`next version will${build_next_version === null ? ' not' : ''} be built`);
            console.log(`pp section will${build_pp === '0' ? ' not' : ''} be built`);
            console.log(`cloud section will${build_cloud === '0' ? ' not' : ''} be built`);

            const build_environments = [];
            if (build_versions.length) {
              build_environments.push('staging');
            }
            if (build_next_version !== null && available_versions.includes(build_next_version)) {
              build_environments.push('next');
            }

            core.exportVariable('build_environments', JSON.stringify(build_environments));
            core.exportVariable('build_versions', build_versions.join(','));
            core.exportVariable('build_next_version', build_next_version);
            core.exportVariable('build_pp', build_pp);
            core.exportVariable('build_cloud', build_cloud);

      - name: Manage versions to build
        uses: actions/github-script@v6
        if: ${{ steps.changes.outputs.global == 'true' || (github.ref_name == 'staging' && github.event_name != 'pull_request') }}
        with:
          script: |
            let build_versions = require('./versions.json');
            let build_next_version = require('./nextVersion.json').version;
            const build_environments = ['staging'];
            if (build_versions.includes(build_next_version)) {
              build_environments.push('next');
              build_versions.splice(build_versions.indexOf(build_next_version), 1);
            }
            core.exportVariable('build_environments', JSON.stringify(build_environments));
            core.exportVariable('build_versions', build_versions.join(','));
            core.exportVariable('build_next_version', require('./nextVersion.json').version);
            core.exportVariable('build_pp', '1');
            core.exportVariable('build_cloud', '1');

      - name: Manage versions to build
        uses: actions/github-script@v6
        id: filters
        with:
          script: |
            core.setOutput('build_environments', '${{ env.build_environments }}');
            core.setOutput('build_versions', '${{ env.build_versions }}');
            core.setOutput('build_next_version', '${{ env.build_next_version }}');
            core.setOutput('build_pp', '${{ env.build_pp }}');
            core.setOutput('build_cloud', '${{ env.build_cloud }}');

  build:
    if: ${{ needs.get-versions.outputs.build_environments != '[]' }}
    runs-on: ubuntu-22.04
    needs: [get-versions]

    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.get-versions.outputs.build_environments) }}
        include:
          - versions: ${{ needs.get-versions.outputs.build_versions }}
            next_version: ${{ needs.get-versions.outputs.build_next_version }}
            pp: ${{ needs.get-versions.outputs.build_pp }}
            cloud: ${{ needs.get-versions.outputs.build_cloud }}

    name: Build ${{ matrix.environment }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        uses: borales/actions-yarn@v4
        with:
          cmd: install --frozen-lockfile

      - name: Build documentation
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        run: yarn build
        env:
          PP: ${{ matrix.pp }}
          CLOUD: ${{ matrix.cloud }}
          VERSIONS: ${{ matrix.environment == 'staging' && matrix.versions || matrix.next_version }}
          BASE_URL: ${{ github.event_name == 'pull_request' && format('/centreon-documentation/pr-preview/{0}/pr-{1}', matrix.environment, github.event.pull_request.number) || '' }}

      - name: Store build in cache
        if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
        uses: actions/cache/save@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-${{ matrix.environment }}"

  deploy-preview:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [get-versions, build]
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.get-versions.outputs.build_environments) }}

    name: Deploy preview ${{ matrix.environment }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Restore build from cache
        if: ${{ github.event.action != 'closed' }}
        uses: actions/cache/restore@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-${{ matrix.environment }}"
          fail-on-cache-miss: true

      - name: Reduce media size
        if: ${{ github.event.action != 'closed' }}
        run: |
          find ./build -iname \*.mp4 -exec sh -c '> {}' \;
          find ./build -iname \*.pdf -exec sh -c '> {}' \;
          find ./build -iname \*.xlsx -exec sh -c '> {}' \;

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./build
          preview-branch: gh-pages
          umbrella-dir: pr-preview/${{ matrix.environment }}
          action: auto

  comment-preview:
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
    needs: [get-versions, deploy-preview]
    runs-on: ubuntu-22.04

    name: Add comment for preview

    steps:
      - name: Prepare environment variables for comment
        uses: actions/github-script@v6
        with:
          script: |
            const preview_urls = ${{ needs.get-versions.outputs.build_environments }}.map((environment) => {
              return `:rocket: Deployed preview to https://centreon.github.io/centreon-documentation/pr-preview/${environment}/pr-${{ github.event.pull_request.number }}`;
            })

            core.exportVariable('datetime', new Date().toUTCString());
            core.exportVariable('preview_urls',preview_urls.join('\n'));

      - name: Leave a comment after deployment
        if: ${{ github.event.action != 'closed' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-preview
          message: "\
            **PR Previews**

            :---:

            ${{ env.preview_urls }}

            on branch [`gh-pages`](${{ github.server_url }}/${{ github.repository }}/tree/gh-pages) at ${{ env.datetime }}


            > **_NOTE:_**  Deployment can take a few minutes before preview is accessible
            "

  deploy-staging:
    if: ${{ github.ref_name == 'staging' && github.event_name != 'pull_request' && contains(fromJson(needs.get-versions.outputs.build_environments), 'staging') }}
    needs: [get-versions, build]
    runs-on: [self-hosted, infra]

    name: Deploy to staging

    environment:
      name: staging
      url: https://docs-staging.int.centreon.com

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Restore build from cache
        uses: actions/cache/restore@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-staging"
          fail-on-cache-miss: true

      - name: Deploy to https://docs-staging.int.centreon.com
        run: |
          # Prepare ssh-key
          eval `ssh-agent`
          ssh-add - <<< "${{ secrets.INT_SSH_KEY }}"

          rsync -e "ssh -o StrictHostKeyChecking=no" -arzvh --delete build/* admin@docs-dev.int.centreon.com:/var/www/html/ \
          || rsync -e "ssh -o StrictHostKeyChecking=no" -arzvh --delete build/* admin@${{ secrets.DOC_DEV_IP_ADDRESS }}:/var/www/html/
        shell: bash

  deploy-next:
    if: ${{ github.ref_name == 'staging' && github.event_name != 'pull_request' && contains(fromJson(needs.get-versions.outputs.build_environments), 'next') }}
    needs: [get-versions, build]
    runs-on: [self-hosted, infra]

    name: Deploy to next

    environment:
      name: next
      url: https://docs-next-int.centreon.com

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Restore build from cache
        uses: actions/cache/restore@v3
        with:
          path: "./build"
          key: "${{ github.sha }}-${{ github.run_id }}-build-doc-next"
          fail-on-cache-miss: true

      - name: Setup awscli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip -q awscliv2.zip
          sudo ./aws/install
        shell: bash

      - name: Deploy to https://docs-next-int.centreon.com
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn ${{ secrets.CLOUDFRONT_ROLE_DOC_PRODUCTION }} \
          --role-session-name InvalidDocCache \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          aws s3 sync --delete build s3://centreon-documentation-next/

          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID_DOC_NEXT }} --paths "/*"
        shell: bash
